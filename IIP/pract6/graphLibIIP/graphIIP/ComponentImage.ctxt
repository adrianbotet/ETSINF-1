#BlueJ class context
comment0.params=col
comment0.target=ComponentImage(java.awt.Color)
comment1.params=
comment1.target=void\ close()
comment1.text=Disposes\ internal\ Frame\ resources\ and\ sets\ visibility\ to\ off.
comment10.params=
comment10.target=void\ showAxes()
comment10.text=\n\ Draw\ x\ &\ y\ axes\ with\ FOR_1\ Color\ and\ DEF_THICKNESS\ width.\n
comment11.params=mV\ xV
comment11.target=double\ ticsPerAxe(double,\ double)
comment11.text=\n\ ticsPerAxe\ computes\ the\ distance\ between\ the\ axes\ tics.\n\ it\ obtains\ the\ same\ values\ (for\ any\ double\ value\ range)\ as\ gnuplot.\n\ \n\ @param\ mV\:\ minimum\ value\ for\ the\ axe\ interval,\ mV\ <\ xV.\n\ @param\ xV\:\ maximum\ value\ for\ the\ axe\ interval,\ mV\ <\ xV.\n\ @return\ double\:\ distance\ for\ tics\ in\ the\ interval.\n
comment12.params=x\ y\ c\ pW
comment12.target=void\ drawPoint(double,\ double,\ java.awt.Color,\ int)
comment12.text=\n\ Draws\ a\ point\ with\ Color\ c\ and\ width\ pW,\ given\ its\ \n\ real\ (x,y)\ coordinates.\n\ @param\ x\:\ The\ abscise\ value\ of\ the\ point.\n\ @param\ y\:\ The\ ordinate\ value\ of\ the\ point.\n\ @param\ c\:\ Color\ of\ the\ point.\n\ @param\ pW\:\ int,\ point's\ width.\n
comment13.params=x1\ y1\ x2\ y2\ c\ lW
comment13.target=void\ drawLine(double,\ double,\ double,\ double,\ java.awt.Color,\ int)
comment13.text=\n\ Draws\ a\ line\ between\ (x1,y1)\ and\ (x2,y2)\ with\ Color\ c\ and\ width\ lW.\n\ Works\ in\ the\ real\ graphic\ space.\n\ @param\ x1\:\ The\ abscise\ value\ of\ the\ first\ point.\n\ @param\ y1\:\ The\ ordinate\ value\ of\ the\ first\ point.\n\ @param\ x2\:\ The\ abscise\ value\ of\ the\ second\ point.\n\ @param\ y2\:\ The\ ordinate\ value\ of\ the\ second\ point.\n\ @param\ c\:\ Color\ of\ the\ line.\n\ @param\ lW\:\ int,\ line's\ width.\n
comment14.params=miX\ maX\ miY\ maY
comment14.target=void\ setGraphTransf(double,\ double,\ double,\ double)
comment14.text=\n\ Affine\ Tranformation\ calculus.\n\ For\ converting\ real\ space\ coordinates\ into\ user's\ (internal)\ one.\n\ @param\ miX\:\ Minimum\ x\ value\ to\ be\ represented,\ miX\ <\ maX.\n\ @param\ maX\:\ Maximum\ x\ value\ to\ be\ represented,\ miX\ <\ maX.\n\ @param\ miY\:\ Minimum\ y\ value\ to\ be\ represented,\ miY\ <\ maY.\n\ @param\ maY\:\ Maximum\ y\ value\ to\ be\ represented,\ miY\ <\ maY.\n
comment15.params=rx\ ry
comment15.target=int[]\ realToInternalTransform(double,\ double)
comment15.text=\n\ Converts\ real\ space\ coordinates\ (rx,ry)\ into\ internal\ ones.\n\ @param\ rx\:\ x-coordinate\ for\ the\ real\ x\ value\ of\ the\ point\ to\ \n\ be\ represented.\n\ @param\ ry\:\ y-coordinate\ for\ the\ real\ y\ value\ of\ the\ point\ to\ \n\ be\ represented.\n\ @returns\ int[]\:\ Array\ with\ its\ first\ component\ with\ the\ i\ coordinate\n\ in\ the\ internal\ space,\ and\ with\ its\ second\ component\ with\n\ the\ j\ coordinate\ in\ the\ internal\ space.\n
comment16.params=ix\ iy
comment16.target=double[]\ internalToRealTransform(int,\ int)
comment16.text=\n\ Converts\ internal\ space\ coordinates\ (ix,iy)\ into\ real\ ones.\n\ @param\ ix\:\ x-coordinate\ for\ the\ column\ value\ of\ the\ point\ to\ \n\ be\ represented.\n\ @param\ iy\:\ y-coordinate\ for\ the\ row\ value\ of\ the\ point\ to\ \n\ be\ represented.\n\ @returns\ int[]\:\ Array\ with\ its\ first\ component\ with\ the\ x\ coordinate\n\ in\ the\ real\ space,\ and\ with\ its\ second\ component\ with\n\ the\ y\ coordinate\ in\ the\ real\ space.\n
comment17.params=mX\ xX\ mY\ xY
comment17.target=void\ realSpaceDimension(double,\ double,\ double,\ double)
comment17.text=\n\ Set,\ the\ real\ Space\ dimensions\:\n\ @param\ mX\:\ Minimum\ x\ value\ to\ be\ represented,\ mX\ <\ xX.\n\ @param\ xX\:\ Maximum\ x\ value\ to\ be\ represented,\ mX\ <\ xX.\n\ @param\ mY\:\ Minimum\ y\ value\ to\ be\ represented,\ mY\ <\ xY.\n\ @param\ xY\:\ Maximum\ y\ value\ to\ be\ represented,\ mY\ <\ xY.\ \n
comment18.params=
comment18.target=double\ getMinX()
comment18.text=Returns\ the\ minimum\ x\ coordinate.
comment19.params=
comment19.target=double\ getMaxX()
comment19.text=Returns\ the\ maximum\ x\ coordinate.
comment2.params=wi\ he
comment2.target=void\ createBuffImage(int,\ int)
comment2.text=\n\ Create\ a\ clean,\ new\ Image,\ stablishing\ its\ dimensions.\n\ @param\ wi\:\ the\ Image\ width\n\ @param\ he\:\ the\ Image\ height\n
comment20.params=
comment20.target=double\ getMinY()
comment20.text=Returns\ the\ minimum\ x\ coordinate.
comment21.params=
comment21.target=double\ getMaxY()
comment21.text=Returns\ the\ maximum\ y\ coordinate.
comment22.params=
comment22.target=double\ getXAxeTic()
comment22.text=Returns\ the\ xAxe\ separation\ between\ tics.
comment23.params=
comment23.target=double\ getYAxeTic()
comment23.text=Returns\ the\ yAxe\ separation\ between\ tics.
comment24.params=e
comment24.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment24.text=\n\ Event\ manager\ for\ mouse\ movements.\ Displays\ the\ mouse\ position\n\ both\ in\ real\ and\ internal\ coordinates\ or\ set\ visibility\ to\ false.\n\ @param\ e\:\ captured\ MouseEvent.\ \n
comment25.params=e
comment25.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment25.text=\n\ Event\ manager\ for\ mouse\ dragging\ movements.\ \n
comment26.params=opt
comment26.target=void\ showMousePosition(boolean)
comment26.text=\n\ Set\ showing\ mouse\ position\ on\ (true)\ or\ off\ (false).\n\ @param\ boolean\ opt\:\ Mouse\ pos.\ will\ be\ showed\ iff\ opt\ is\ true.\n
comment27.params=
comment27.target=void\ showMousePosition()
comment27.text=\ \n\ showMousePosition\ displays\ the\ mouse\ position\ both\ in\ real\ and\ internal\ \n\ coordinates.\ \n
comment3.params=g
comment3.target=void\ paintComponent(java.awt.Graphics)
comment3.text=\n\ The\ paint(Graphics)\ method\ for\ this\ Component.\n\ @param\ g\:\ The\ Graphics\ element\ for\ this\ Component.\n
comment4.params=
comment4.target=void\ refreshDrawedElements()
comment4.text=\n\ Redraw\ point\ and\ lines\ whenever\ this\ Component\ dimensions\ change.\n
comment5.params=
comment5.target=java.awt.Dimension\ getPreferredSize()
comment5.text=\n\ Component's\ dimension\ is\ stablished\ from\ the\ image.\n
comment6.params=i\ j\ c
comment6.target=void\ drawPixel(int,\ int,\ java.awt.Color)
comment6.text=\n\ Draw\ a\ pixel\ in\ the\ (i,j)\ coordinate\ with\ Color\ c.\n\ Works\ in\ the\ internal\ graphic\ space.\n\ @param\ i\:\ The\ abscise\ value\ of\ the\ pixel\ to\ be\ represented.\n\ @param\ j\:\ The\ ordinate\ value\ of\ the\ pixel\ to\ be\ represented.\n
comment7.params=i\ j\ c\ lW\ re
comment7.target=void\ drawPoint(int,\ int,\ java.awt.Color,\ int,\ boolean)
comment7.text=\n\ Draws\ a\ Point.\ \n\ Works\ in\ the\ internal\ graphic\ space.\n\ @param\ x\:\ The\ abscise\ value\ of\ the\ point.\n\ @param\ y\:\ The\ ordinate\ value\ of\ the\ point.\n\ @param\ re\:\ Repaint\ it\ or\ not.\n
comment8.params=i1\ j1\ i2\ j2\ c\ lW\ re
comment8.target=void\ drawLine(int,\ int,\ int,\ int,\ java.awt.Color,\ int,\ boolean)
comment8.text=\n\ Draws\ a\ line\ between\ (i1,j1)\ and\ (i2,j2)\ with\ Color\ c.\n\ Works\ in\ the\ internal\ graphic\ space.\n\ @param\ i1\:\ The\ abscise\ value\ of\ the\ first\ point.\n\ @param\ j1\:\ The\ ordinate\ value\ of\ the\ first\ point.\n\ @param\ i2\:\ The\ abscise\ value\ of\ the\ second\ point.\n\ @param\ j2\:\ The\ ordinate\ value\ of\ the\ second\ point.\n\ @param\ re\:\ Repaint\ it\ or\ not.\n
comment9.params=opt
comment9.target=void\ showAxes(boolean)
comment9.text=\n\ Show\ axes\ crossing\ at\ (0,0)\ with\ Graph2D.FOR_1\ Color\ and\ \n\ Graph2D.LINE_WIDTH\ width.\n\ @param\ opt\ boolean.\ Show\ axes\ or\ not.\n
numComments=28
