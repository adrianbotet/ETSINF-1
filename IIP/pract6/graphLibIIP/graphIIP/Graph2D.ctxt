#BlueJ class context
comment0.params=mX\ xX\ mY\ xY\ bckCol\ t
comment0.target=Graph2D(double,\ double,\ double,\ double,\ java.awt.Color,\ java.lang.String)
comment0.text=\ Creates\ a\ <B>Graph2D</B>\ with\ real\ dimensions,\ <B>bckCol</B>\ color\ \n\ and\ <B>t</B>\ title.\n\ @param\ <B>mX</B>\:\ double.\ Minimum\ x-coordinate\ value,\ mX\ &lt;\ xX.\n\ @param\ <B>xX</B>\:\ double.\ Maximum\ x-coordinate\ value,\ mX\ &lt;\ xX.\n\ @param\ <B>mY</B>\:\ double.\ Minimum\ y-coordinate\ value,\ mY\ &lt;\ xY.\n\ @param\ <B>xY</B>\:\ double.\ Maximum\ y-coordinate\ value,\ mY\ &lt;\ xY.\n\ @param\ <B>bckColor</B>\:\ Color.\ Background\ color.\n\ @param\ <B>t</B>\:\ String.\ Title\ of\ the\ graph.\ window.\n\ @throws\ <B>ImagingOpException</B>\:\ Whenever\ an\ atempt\ to\ build\ an\n\ incorrect\ <B>Graph2D</B>\ is\ made.\n
comment1.params=mX\ xX\ mY\ xY
comment1.target=Graph2D(double,\ double,\ double,\ double)
comment1.text=\ Creates\ a\ <B>Graph2D</B>\ with\ real\ dimensions\ and\ default\ \n\ background\ color\ and\ title.\n\ @param\ <B>mX</B>\:\ double.\ Minimum\ x-coordinate\ value,\ mX\ &lt;\ xX.\n\ @param\ <B>xX</B>\:\ double.\ Maximum\ x-coordinate\ value,\ mX\ &lt;\ xX.\n\ @param\ <B>mY</B>\:\ double.\ Minimum\ y-coordinate\ value,\ mY\ &lt;\ xY.\n\ @param\ <B>xY</B>\:\ double.\ Maximum\ y-coordinate\ value,\ mY\ &lt;\ xY.\n\ @throws\ <B>ImagingOpException</B>\:\ Whenever\ an\ atempt\ to\ build\ an\n\ incorrect\ <B>Graph2D</B>\ is\ made.\n
comment10.params=e
comment10.target=void\ windowClosing(java.awt.event.WindowEvent)
comment10.text=\ Closing\ sequence\ whenever\ this\ graph\ window\ is\ closed.\ \nThere\ is\ no\ necessity\ to\ be\ called\ by\ the\ user.
comment11.params=
comment11.target=double\ getMinX()
comment11.text=Returns\ the\ minimum\ x\ coordinate.
comment12.params=
comment12.target=double\ getMaxX()
comment12.text=Returns\ the\ maximum\ x\ coordinate.
comment13.params=
comment13.target=double\ getMinY()
comment13.text=Returns\ the\ minimum\ y\ coordinate.
comment14.params=
comment14.target=double\ getMaxY()
comment14.text=Returns\ the\ maximum\ y\ coordinate.
comment15.params=
comment15.target=int\ getThickness()
comment15.text=\ Returns\ the\ current\ setting\ for\ the\ thickness\ of\ lines\ &\ \n\ \ points.\ \n
comment16.params=c
comment16.target=java.awt.Color\ getForgrColor(java.awt.Color)
comment16.text=Returns\ the\ current\ setting\ for\ the\ foreground\ color.
comment17.params=
comment17.target=void\ showDimensions()
comment17.text=\n\ Print\ in\ this\ Frame\ bottom\ bar,\ the\ axes\ ranges\ values.\n
comment18.params=
comment18.target=void\ showAxesLabel()
comment18.text=\n\ Print\ in\ this\ Frame\ bottom\ the\ axes,\ intervals\ (the\ distance\n\ between\ axes\ tics)\ values.\n
comment2.params=c
comment2.target=void\ setForgrColor(java.awt.Color)
comment2.text=\n\ Set\ foreground\ Color\ <B>c</B>,\ for\ drawing\ from\ now\ on.\n\ @param\ <B>c</B>\:\ The\ foreground\ Color.\n
comment3.params=th
comment3.target=void\ setThickness(int)
comment3.text=\n\ Set\ lines\ &\ points\ thickness\ <B>th</B>\ for\ drawing\ from\ now\ on.\n\ @param\ <B>th</B>\ int\:\ Thickness\ of\ lines\ and\ points\ to\ be\ drawed.\n
comment4.params=x\ y\ c\ th
comment4.target=void\ drawPoint(double,\ double,\ java.awt.Color,\ int)
comment4.text=\n\ Draws\ a\ point\ with\ Color\ <B>c</B>\ and\ <B>th</B>\ thickness,\ given\ \n\ its\ real\ (<B>x</B>,<B>y</B>)\ coordinates.\n\ @param\ <B>x</B>\:\ The\ abscise\ value\ of\ the\ point.\n\ @param\ <B>y</B>\:\ The\ ordinate\ value\ of\ the\ point.\n\ @param\ <B>c</B>\:\ Color\ of\ the\ point.\n\ @param\ <B>th</B>\:\ int.\ The\ thickness\ of\ the\ point.\n
comment5.params=x\ y
comment5.target=void\ drawPoint(double,\ double)
comment5.text=\n\ Draws\ a\ point\ given\ its\ real\ (<B>x</B>,<B>y</B>)\ coordinates.\n\ @param\ <B>x</B>\:\ The\ abscise\ value\ of\ the\ point.\n\ @param\ <B>y</B>\:\ The\ ordinate\ value\ of\ the\ point.\n
comment6.params=x1\ y1\ x2\ y2\ c\ th
comment6.target=void\ drawLine(double,\ double,\ double,\ double,\ java.awt.Color,\ int)
comment6.text=\n\ Draws\ a\ line\ between\ (<B>x1</B>,<B>y1</B>)\ and\ \n\ (<B>x2</B>,<B>y2</B>)\ with\ Color\ <B>c</B>\ and\ <B>th</B>\ \n\ thickness.\n\ Works\ in\ the\ real\ graphic\ space.\n\ @param\ <B>x1</B>\:\ The\ abscise\ value\ of\ the\ first\ point.\n\ @param\ <B>y1</B>\:\ The\ ordinate\ value\ of\ the\ first\ point.\n\ @param\ <B>x2</B>\:\ The\ abscise\ value\ of\ the\ second\ point.\n\ @param\ <B>y2</B>\:\ The\ ordinate\ value\ of\ the\ second\ point.\n\ @param\ <B>c</B>\:\ Color\ of\ the\ line.\n\ @param\ <B>th</B>\:\ int,\ the\ thickness\ of\ the\ line.\n
comment7.params=x1\ y1\ x2\ y2
comment7.target=void\ drawLine(double,\ double,\ double,\ double)
comment7.text=\n\ Draws\ a\ line\ between\ (<B>x1</B>,<B>y1</B>)\ and\ \n\ (<B>x2</B>,<B>y2</B>).\n\ Works\ in\ the\ real\ graphic\ space.\n\ @param\ <B>x1</B>\:\ The\ abscise\ value\ of\ the\ first\ point.\n\ @param\ <B>y1</B>\:\ The\ ordinate\ value\ of\ the\ first\ point.\n\ @param\ <B>x2</B>\:\ The\ abscise\ value\ of\ the\ second\ point.\n\ @param\ <B>y2</B>\:\ The\ ordinate\ value\ of\ the\ second\ point.\n
comment8.params=opt
comment8.target=void\ showAxes(boolean)
comment8.text=\n\ Set\ drawing\ axes\ on\ (true\ by\ default)\ or\ off\ (false).\n\ @param\ boolean\ <B>opt</B>\:\ Axes\ will\ be\ drawn\ iff\ opt\ is\ true.\ \n
comment9.params=opt
comment9.target=void\ showMousePosition(boolean)
comment9.text=\n\ Set\ showing\ mouse\ position\ on\ (true\ by\ default)\ or\ off\ (false).\n\ @param\ boolean\ <B>opt</B>\:\ Mouse\ pos.\ will\ be\ showed\ iff\ opt\ is\ true\n
numComments=19
